/**
 * –ú–æ–¥—É–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ DPI Probe
 */
class ResultViewer {
    constructor(container, options = {}) {
        this.container = container;
        if (!options.i18n) {
            throw new Error('ResultViewer requires an i18n service instance.');
        }
        this.i18n = options.i18n;
        this.lastTestResult = null;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
     */
    showUrlTestResult(testResult) {
        this.lastTestResult = testResult;
        this.render();
    }

    /**
     * –†–µ–Ω–¥–µ—Ä (–ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞) –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
     */
    render() {
        // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
        this.container.innerHTML = '';

        if (!this.lastTestResult) {
            return; // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
        }

        const resultCard = this.createResultCard(this.lastTestResult);
        this.container.appendChild(resultCard);
        resultCard.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
     */
    createResultCard(testResult) {
        const card = DOM.create('div', { className: 'url-result-card fade-in' });
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ rowData, –¥–ª—è DetailsRenderer
        const renderData = {
            ...testResult,
            lastChecked: new Date().toISOString() // –î–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        };

        card.innerHTML = `
            <div class="url-result-header">
                <h3 class="url-result-title">${this.i18n.t('modalContent.testDetailsTitle')} <span class="details-target">${testResult.url}</span></h3>
                <button class="url-result-close" data-action="close-result">&times;</button>
            </div>
            <div class="url-result-content">
                ${this.renderVerdict(testResult.verdict)}
                ${DetailsRenderer.render(renderData)}
            </div>
            <div class="url-result-actions">
                <button class="btn btn-secondary" data-action="add-to-table">${this.i18n.t('buttons.add')}</button>
            </div>
        `;

        this.bindResultCardEvents(card, testResult);
        return card;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ —Å –≤–µ—Ä–¥–∏–∫—Ç–æ–º
     */
    renderVerdict(verdict) {
        if (!verdict || !verdict.messageKey) return '';
        
        let statusClass, icon;
        const verdictText = this.i18n.t(`verdicts.${verdict.messageKey}`);

        switch (verdict.level) {
            case 1: 
                statusClass = 'warning';
                icon = '‚ö†Ô∏è';
                break;
            case 2: 
                statusClass = 'error';
                icon = 'üö´';
                break;
            default: 
                statusClass = 'success';
                icon = '‚úÖ';
        }

        return `
            <div class="verdict-highlight-card status-border-${statusClass}">
                <div class="verdict-highlight-header">
                    <span class="verdict-highlight-icon">${icon}</span>
                    <h4 class="verdict-highlight-title">${this.i18n.t('table.colVerdict')}</h4>
                </div>
                <p class="verdict-highlight-text">${verdictText}</p>
            </div>
        `;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ
     */
    bindResultCardEvents(card, testResult) {
        const closeButton = card.querySelector('[data-action="close-result"]');
        Events.on(closeButton, 'click', () => this.closeResultCard(card));

        const addButton = card.querySelector('[data-action="add-to-table"]');
        Events.on(addButton, 'click', () => {
            if (this.onAddToTable) {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É
                const resultWithTimestamp = {
                    ...testResult,
                    lastChecked: new Date().toISOString()
                };
                this.onAddToTable(resultWithTimestamp);
                this.closeResultCard(card);
            }
        });
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
     */
    closeResultCard(card) {
        // –°–ù–ê–ß–ê–õ–ê –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        this.lastTestResult = null;
        Events.emit('result-card-closed');

        // –ü–û–¢–û–ú –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        Animation.fadeOut(card, 300, () => {
            if (card.parentNode) {
                card.parentNode.removeChild(card);
            }
        });
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
     */
    setEventHandlers(handlers) {
        this.onAddToTable = handlers.onAddToTable;
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
     */
    clearAllResults() {
        this.container.innerHTML = '';
        this.lastTestResult = null;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.ResultViewer = ResultViewer;
